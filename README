README file for the HLRN-IV FESOM2 benchmark
------------------------------------------

This subdirectory contains input files, reference data and example scripts
to run the HLRN benchmark for the FESOM2 application software.

This README file explains the benchmark procedure.

For a brief description of the FESOM application software we refere to 
the specification guide.


1. Prerequisites:
-----------------

To be able to run the benchmark the following libraries must be installed 
on your system:

Library   Version  Further information
metis     5.1.0    http://glaros.dtc.umn.edu/gkhome/views/metis
pARMS     3.2      http://www-users.cs.umn.edu/~saad/software/pARMS/
NetCDF    >=4.0    http://www.unidata.ucar.edu/software/netcdf/index.html

The source codes of metis and pARMS are provided in the lib/ subdirectory. 
Makefiles and machine-specific include files (Makefile.in) are in the
respective subdirectories.
As NetCDF should also be required for other benchmarks, it is not included
in this package.


2. Benchmark procedure:
-----------------------

- You need to build the executable for your hardware yourself!


- Building the executables

  The provided script  build_all.sh  lets you build the libraries
  and the model executables in one step. However, the file
  Makefile.in, in the two library directories and the model directory
  src/ need to be adapted to the specific computer.

  1a. Build the required libraries
      cd FESOMROOT/lib/metis-5.1.0; make
      cd FESOMROOT/lib/parms; make
  2.  cd FESOMROOT/src/; make fesom 
  3.  make clean; make fesom_ini
      This builds the executables 'fesom' and 'fesom_ini' in bin/

  For both libraries as well as for the model in src/, there is a
  file Makefile.in, which needs to be apated to the specific computer.

  The program 'fesom_ini' is used to prepare the partitioning of
  the model mesh. The executable 'fesom' is the model performing
  the time stepping that is to be benchmarked. Thus, running FESOM2
  is a two-step procedure: First generate the mesh partitioning and
  second run the model with the generated partitioned mesh. 

- Run the benchmark
  
  + Using jobscripts
    The subdirectory run provides an example jobscript to copute the 
    mesh partitioning  (job_combined.sh). 
    It can serve a starting point to run the benchmark.

  + Run the application using different numbers of CPUs.

- NOTICE

  Sometimes it can happen that Metis generates a mesh partitioning that is incompatible
  with FESOM (we had this case e.g. for 2400 cores, but it can depend on the processor
  and compiler). In this case when one runs FESOM2 the model runs until the line
           0 mesh_setup... complete  
  and runs into a deadlock. If this happens, you can try a different number of processes
  or change the random number for Metis. For this edit in the file FESOMROOT/src/fort_part.c
  the line 66:
       opt[Metis_Option_Seed] = 7;  
  In the provided code, this line is commented out. So remove the comments to set the value
  for the random number seed. i

  Please also note, that the compute performance can depend on the partitioning. Thus, it
  might be useful to try difference values of the random number seed.

- Job output

  The program is configured to write no model output files.
  The standard output of the FEOM benchmark is redirected into files, one file
  per CPU used by the benchmark (feom.stdout_$MYID, with $MYID as the
  number of the CPU which has been written to the file). 
  
- Validating the results

  The standard output of CPU 0 generated by running the FESOM application
  benchmark contains the lines (near the end of the file )

 ...
 ======== CHECKSUMS =========
 ssh:           -2980.59450831914
 Temperature:    688961897.911490
 Salinity:       2630094573.54246
 ...

 You will find the reference output in "out/fesom.out.reference"
 It is required that the absolute value of the difference between your 
 result of the checksums and the reference values does not exceed 
 
 2.0    for ssh,
 400.0  for Temperature and
 200.0  for Salinity
 
 If the difference is larger, the result is regarded to be wrong, and the
 benchmark run will be not accepted.

 Small numerical differences even when running the same executable with
 different numbers of tasks are not uncommon, and are due to small numerical
 noise, different numerical library implementations and different
 (aggressive) compiler optimizations. However, the accuracy defined above
 has to be reached.
  
  
- Performance and performance rates

  The benchmark is designed to perform 400 time steps (defined by the variables
  'run_length' and 'step_per_day') in namelist.config
  (These parameters must not be changed to keep the benchmarks comparable!)
  
  Within the time loop, a estimated amount of 554 000 000 000 000 (554 TFLOP)
  floating point operations (FLOP) will be performed.
  
  For evaluating the performance of this benchmark you will find time measurement
  informations at the end of the standard output file fesom.out like this

#-----------------------------------------------------------------------------------------------#
| FESOM2 time measurements                                                                      |
#-----------------------------------------------------------------------------------------------#
| on 02400 PEs                                                                                  |
#-----------------------------------------------------------------------------------------------#
| Nr.  Location                         time       %        var      max  at i1      min  at i2 |
|                                        (s)                (s)       (s)             (s)       |
|   1                     Total:       681.45   100.0      0.00    681.45   697    681.44  1734 |
|   2      Model initialization:       465.93    68.4      1.35    467.48  1328    463.05   571 |
|   3             Time stepping:       215.52    31.6      1.35    218.40   555    213.97  2096 |
|   4              Ice stepping:        64.22     9.4      3.14     78.72  1734     60.10   720 |
|   5            Ocean stepping:       143.27    21.0      2.89    147.26   720    128.97  1724 |
#-----------------------------------------------------------------------------------------------#

  In this table time consumptions of different parts of the model are provided. 
  Here,

  "time" is the average time consumption in seconds of the given model part,
  "%"    is the average relative time consumption,
  "var"  is the standard deviation with regard to all CPUs used by the model run,
  "max"  is the maximum value of time consumption at the
  "i1"-th processor and
  "min"  is the minimum value of time consumption at the
  "i2"-th processor.
  
  E.G. the part no. 1 "Total" nearly represents the over all time consumption of 
  the model run (something like the wall clock time). 
  
  !!  To evaluate the performance rate please devide the predetermined number of FLOP  !!
  !!  by the value given for the "Time stepping" part (No. 3) to evaluate the floating !!
  !!  point operations per seconds for the time stepping part.                         !!
  
  (for the example given above you will get
   554,000,000,000,000 Flop / 215.52 s = 2.57 TFlop/s)
    
- Minimum performance requirement

  A mimimum performance of 3.0 TFlop/s should be achieved. 

