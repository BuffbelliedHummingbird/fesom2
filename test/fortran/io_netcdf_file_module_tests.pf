module io_netcdf_file_module_tests
  use io_netcdf_file_module
  use funit; implicit none
  
contains


  @test
  subroutine test_can_initialize_without_filepath()
    type(fesom_file_type) f
    
    call f%initialize()
  end subroutine


  @test
  subroutine test_can_add_dims()
    type(fesom_file_type) f
    integer nz_dimidx, node_dimidx

    call f%initialize()
    nz_dimidx = f%add_dim("nz", 47)
    @assertEqual(1, nz_dimidx)
    node_dimidx = f%add_dim("node", 47)
    @assertEqual(2, node_dimidx)
  end subroutine


  @test
  subroutine test_can_add_unlimited_dim()
    type(fesom_file_type) f
    integer dimidx

    call f%initialize()
    dimidx = f%add_dim_unlimited("time")
    @assertEqual(1, dimidx)
  end subroutine


  @test
  subroutine test_can_add_vars()
    type(fesom_file_type) f
    integer nz_dimidx, node_dimidx
    integer salt_varid

    call f%initialize()
    nz_dimidx = f%add_dim("nz", 47)
    @assertEqual(1, nz_dimidx)
    node_dimidx = f%add_dim("node", 47)
    @assertEqual(2, node_dimidx)

    salt_varid = f%add_var_real("salt", [1,2])
    call f%add_var_att(salt_varid, "units", "psu")
    call f%add_var_att(salt_varid, "long_name", "salinity")
  end subroutine


  @test
  subroutine test_can_open_file_in_readmode_without_expecting_dims_and_vars()
    type(fesom_file_type) f

    call f%initialize()
    call f%open_read("fixtures/io_netcdf/columnwise_3d_salt.nc")
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_open_file_with_unlimited_dim()
    type(fesom_file_type) f
    integer dimidx

    call f%initialize()
    dimidx = f%add_dim_unlimited("time")

    call f%open_read("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_open_file_with_variable()
    type(fesom_file_type) f
    integer nz_dimidx, node_dimidx, time_dimidx
    integer salt_varid
    call f%initialize()
    nz_dimidx = f%add_dim("nz1", 3)
    @assertEqual(1, nz_dimidx)
    node_dimidx = f%add_dim("nod2", 5)
    @assertEqual(2, node_dimidx)
    time_dimidx = f%add_dim_unlimited("time")
    @assertEqual(3, time_dimidx)

    salt_varid = f%add_var_real("salt", [nz_dimidx,node_dimidx,time_dimidx])
    call f%add_var_att(salt_varid, "units", "psu")
    call f%add_var_att(salt_varid, "long_name", "salinity")
    
    call f%open_read("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_read_2d_variable_real4()
    type(fesom_file_type) f
    real(4), allocatable :: values(:)
    
    integer node_dimidx, time_dimidx
    integer sss_varindex
    call f%initialize()
    node_dimidx = f%add_dim("nod2", 5)
    time_dimidx = f%add_dim_unlimited("time")

    sss_varindex = f%add_var_real("sss", [node_dimidx,time_dimidx])
    call f%open_read("fixtures/io_netcdf/columnwise_2d_sss.nc")
    
    allocate(values(5))
    call f%read_var(sss_varindex, [1,1], [5,1], values)
    ! check level 1 values
    @assertEqual(1.001, values(1), tolerance=1.e-6)  
    @assertEqual(1.002, values(2), tolerance=1.e-6)  
    @assertEqual(1.003, values(3), tolerance=1.e-6)  
    @assertEqual(1.004, values(4), tolerance=1.e-6)  
    @assertEqual(1.005, values(5), tolerance=1.e-6)  
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_read_2d_variable_real8()
    type(fesom_file_type) f
    real(8), allocatable :: values(:)
    
    integer node_dimidx, time_dimidx
    integer sss_varindex
    call f%initialize()
    node_dimidx = f%add_dim("nod2", 5)
    time_dimidx = f%add_dim_unlimited("time")

    sss_varindex = f%add_var_real("sss", [node_dimidx,time_dimidx])
    call f%open_read("fixtures/io_netcdf/columnwise_2d_sss.nc")
    
    allocate(values(5))
    call f%read_var(sss_varindex, [1,1], [5,1], values)
    ! check level 1 values
    @assertEqual(1.001, values(1), tolerance=1.e-6)  
    @assertEqual(1.002, values(2), tolerance=1.e-6)  
    @assertEqual(1.003, values(3), tolerance=1.e-6)  
    @assertEqual(1.004, values(4), tolerance=1.e-6)  
    @assertEqual(1.005, values(5), tolerance=1.e-6)  
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_read_3d_variable_real4()
    type(fesom_file_type) f
    real(4), allocatable :: values(:,:)
    
    integer node_dimidx, time_dimidx, z_dimidx
    integer varindex

    call f%initialize()
    node_dimidx = f%add_dim("nod2", 5)
    z_dimidx = f%add_dim("nz1", 3)
    time_dimidx = f%add_dim_unlimited("time")

    varindex = f%add_var_real("salt", [z_dimidx, node_dimidx,time_dimidx])
    call f%open_read("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    allocate(values(3,5))
    call f%read_var(varindex, [1,1,1], [3,5,1], values)
    ! check level 1 values
    @assertEqual(1.001, values(1,1), tolerance=1.e-6)  
    @assertEqual(1.002, values(1,2), tolerance=1.e-6)  
    @assertEqual(1.003, values(1,3), tolerance=1.e-6)  
    @assertEqual(1.004, values(1,4), tolerance=1.e-6)  
    @assertEqual(1.005, values(1,5), tolerance=1.e-6)  

    ! check level 2 values
    @assertEqual(2.001, values(2,1), tolerance=1.e-6)  
    @assertEqual(2.002, values(2,2), tolerance=1.e-6)  
    @assertEqual(2.003, values(2,3), tolerance=1.e-6)  
    @assertEqual(2.004, values(2,4), tolerance=1.e-6)  
    @assertEqual(2.005, values(2,5), tolerance=1.e-6)  
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_read_3d_variable_real8()
    type(fesom_file_type) f
    real(8), allocatable :: values(:,:)
    
    integer node_dimidx, time_dimidx, z_dimidx
    integer varindex

    call f%initialize()
    node_dimidx = f%add_dim("nod2", 5)
    z_dimidx = f%add_dim("nz1", 3)
    time_dimidx = f%add_dim_unlimited("time")

    varindex = f%add_var_real("salt", [z_dimidx, node_dimidx,time_dimidx])
    call f%open_read("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    allocate(values(3,5))
    call f%read_var(varindex, [1,1,1], [3,5,1], values)
    ! check level 1 values
    @assertEqual(1.001, values(1,1), tolerance=1.e-6)  
    @assertEqual(1.002, values(1,2), tolerance=1.e-6)  
    @assertEqual(1.003, values(1,3), tolerance=1.e-6)  
    @assertEqual(1.004, values(1,4), tolerance=1.e-6)  
    @assertEqual(1.005, values(1,5), tolerance=1.e-6)  

    ! check level 2 values
    @assertEqual(2.001, values(2,1), tolerance=1.e-6)  
    @assertEqual(2.002, values(2,2), tolerance=1.e-6)  
    @assertEqual(2.003, values(2,3), tolerance=1.e-6)  
    @assertEqual(2.004, values(2,4), tolerance=1.e-6)  
    @assertEqual(2.005, values(2,5), tolerance=1.e-6)  
    
    call f%close_file()
  end subroutine


end module
