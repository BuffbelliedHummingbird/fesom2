module io_fesom_file_module_tests
  use io_fesom_file_module
  use funit; implicit none
  
contains  


  @test
  subroutine test_can_initialize_without_filepath()
    type(fesom_file_type) f
    
    call f%initialize()
  end subroutine


  @test
  subroutine test_can_add_dims()
    type(fesom_file_type) f
    integer nz_dimidx, node_dimidx

    call f%initialize()
    nz_dimidx = f%add_dim("nz", 47)
    @assertEqual(1, nz_dimidx)
    node_dimidx = f%add_dim("node", 47)
    @assertEqual(2, node_dimidx)
  end subroutine


  @test
  subroutine test_can_add_unlimited_dim()
    type(fesom_file_type) f
    integer dimidx

    call f%initialize()
    dimidx = f%add_dim_unlimited("time")
    @assertEqual(1, dimidx)
  end subroutine


  @test
  subroutine test_can_add_vars()
    type(fesom_file_type) f
    integer nz_dimidx, node_dimidx
    integer salt_varid

    call f%initialize()
    nz_dimidx = f%add_dim("nz", 47)
    @assertEqual(1, nz_dimidx)
    node_dimidx = f%add_dim("node", 47)
    @assertEqual(2, node_dimidx)

    salt_varid = f%add_var("salt", [1,2], "psu", "salinity")
  end subroutine


  @test
  subroutine test_can_open_file_in_readmode()
    type(fesom_file_type) f
    integer z_dimidx

    call f%initialize()
    z_dimidx = f%add_dim("nz1", 3)

    call f%open_readmode("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    call f%close_file()
  end subroutine


  @test
  subroutine test_can_open_file_with_unlimited_dim()
    type(fesom_file_type) f
    integer dimidx

    call f%initialize()
    dimidx = f%add_dim_unlimited("time")

    call f%open_readmode("fixtures/io_netcdf/columnwise_3d_salt.nc")
    
    call f%close_file()
  end subroutine


end module
