module forcing_provider_module_tests
  use forcing_provider_module
  use funit; implicit none
  
contains


  @test
  subroutine test_netcdf_forcing_can_get_timestep1_twice()
    real(8), allocatable :: forcingdata(:,:) ! in fesom its is real(8) wide, so we test for that
    character(:), allocatable :: filepath
    character(:), allocatable :: varname
    
    filepath = "fixtures/test.1948.nc"
    varname = "q"
    allocate(forcingdata(3,4))
    call forcing_provider%get_forcingdata(1, filepath, 2015, varname, 1, forcingdata)
    @assertEqual(0.0000d0, forcingdata(1,1), tolerance=1.e-6)  
    @assertEqual(0.0001d0, forcingdata(2,1), tolerance=1.e-6)  
    @assertEqual(0.0007d0, forcingdata(2,3), tolerance=1.e-6)  
    
    call forcing_provider%get_forcingdata(1, filepath, 2015, varname, 1, forcingdata)
    @assertEqual(0.0000d0, forcingdata(1,1), tolerance=1.e-6)  
    @assertEqual(0.0001d0, forcingdata(2,1), tolerance=1.e-6)  
    @assertEqual(0.0007d0, forcingdata(2,3), tolerance=1.e-6)  
  end subroutine


  @test
  subroutine test_netcdf_forcing_timestep5_equals_fixture()
    real(8), allocatable :: forcingdata(:,:) ! in fesom its is real(8) wide, so we test for that
    character(:), allocatable :: filepath
    character(:), allocatable :: varname
    
    filepath = "fixtures/test.1948.nc"
    varname = "q"
    allocate(forcingdata(3,4))

    call forcing_provider%get_forcingdata(1, filepath, 2015, varname, 5, forcingdata)
    @assertEqual(0.0048d0, forcingdata(1,1), tolerance=1.e-6)  
    @assertEqual(0.0049d0, forcingdata(2,1), tolerance=1.e-6)  
    @assertEqual(0.0055d0, forcingdata(2,3), tolerance=1.e-6)
  end subroutine

end module
